{"version":3,"file":"central-dir.js","sourceRoot":"","sources":["../../src/central-dir.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\nimport fs from 'node:fs';\nimport { FileHandle } from 'node:fs/promises';\nimport { CentralDirFileHeader } from './cdfh';\nimport { ZipEntry } from './entry';\nimport { EndOfCentralDirRecord } from './eocd';\nimport { Logger } from './types';\nimport { testMemoryUsage } from './utils';\n\nexport interface CentralDirOptions {\n  logger: Logger;\n  dataSource?: string | Buffer;\n}\n\nexport class CentralDir {\n  public src!: string;\n  public entries!: ZipEntry[];\n  private logger!: Logger;\n\n  /**\n   * dataSource:\n   * - If it is an outer zip, it will be a file path.\n   * - If it is an inner zip, there are two cases:\n   *   - If the size exceeds 50MB, it will be a file path.\n   *   - If the size does not exceed 50MB, it will be a buffer.\n   */\n  private dataSource!: string | Buffer;\n\n  constructor(src: string, opts: CentralDirOptions) {\n    this.src = src;\n    this.logger = opts.logger;\n    this.dataSource = opts.dataSource || src;\n\n    if (Buffer.isBuffer(this.dataSource)) {\n      // Assert the buffer size should under 50MB\n      assert(this.dataSource.length < 50 * 1024 * 1024, 'The buffer size should under 50MB');\n    }\n  }\n\n  public async init() {\n    const start = Date.now();\n    const eocd = new EndOfCentralDirRecord(await this.extractEOCDBuffer());\n    const end = Date.now();\n    this.logger.info(`[AdvZlib.CentralDir] init(): Init EOCD in ${end - start}ms`);\n\n    const start2 = Date.now();\n    const cdfhs = await testMemoryUsage(\n      'initCDFHs',\n      async () => {\n        return this.initCDFHs(eocd);\n      },\n      this.logger\n    );\n    const end2 = Date.now();\n    this.logger.info(`[AdvZlib.CentralDir] init(): Init CDFHs in ${end2 - start2}ms`);\n\n    const start3 = Date.now();\n    this.entries = await testMemoryUsage(\n      'initEntries',\n      async () => {\n        return this.initEntries(cdfhs);\n      },\n      this.logger\n    );\n    const end3 = Date.now();\n    this.logger.info(`[AdvZlib.CentralDir] init(): Init entries in ${end3 - start3}ms`);\n  }\n\n  /**\n   * Extracts the EndOfCentralDirRecord from the given data source.\n   *\n   * If the data source is a file, it reads the last 22 bytes of the file (the minimum size of EOCD).\n   * If the data source is a buffer, it copies the last 22 bytes of the buffer (the minimum size of EOCD).\n   * Then it searches for the EOCD signature from the end of the buffer.\n   * If the signature is found, it returns the buffer from the signature index to the end.\n   * If the signature is not found, it throws an error.\n   *\n   * @returns A promise that resolves to the EndOfCentralDirRecord buffer\n   */\n  private async extractEOCDBuffer(): Promise<Buffer> {\n    const fd = Buffer.isBuffer(this.dataSource) ? this.dataSource : await fs.promises.open(this.dataSource, 'r');\n\n    const stat = Buffer.isBuffer(fd) ? { size: fd.length } : await fd.stat();\n\n    const eocdSize = Math.min(stat.size, EndOfCentralDirRecord.MAX_SIZE);\n    const eocdBuf = Buffer.alloc(eocdSize);\n\n    if (!Buffer.isBuffer(fd)) {\n      await fd.read(eocdBuf, 0, eocdSize, stat.size - eocdSize);\n      await fd.close();\n    } else {\n      fd.copy(eocdBuf, 0, stat.size - eocdSize, stat.size);\n    }\n\n    const signatureBuffer = Buffer.alloc(4);\n    signatureBuffer.writeUInt32LE(EndOfCentralDirRecord.SIGNATURE);\n    const signatureIndex = eocdBuf.indexOf(signatureBuffer);\n\n    if (signatureIndex === -1) {\n      throw new Error(`[AdvZlib.CentralDir] extractEOCDBuffer(): EOCD signature not found in ${this.src}`);\n    }\n\n    return eocdBuf.subarray(signatureIndex);\n  }\n\n  private async initCDFHs(eocd: EndOfCentralDirRecord): Promise<CentralDirFileHeader[]> {\n    const fd = Buffer.isBuffer(this.dataSource) ? this.dataSource : await fs.promises.open(this.dataSource, 'r');\n\n    let offset = eocd.centralDirOffset;\n    const defaultExtraFieldSize = 0xffff; // Max file name length\n    const cdfhs: CentralDirFileHeader[] = [];\n    const shardSize = Math.min(CentralDirFileHeader.MIN_SIZE + defaultExtraFieldSize, eocd.centralDirSize);\n    const shardBuffer = Buffer.alloc(shardSize);\n\n    while (offset < eocd.centralDirOffset + eocd.centralDirSize) {\n      // Read the minimal fixed-size part of the header\n      await this.read(fd, shardBuffer, 0, shardSize, offset);\n      const cdfh = new CentralDirFileHeader(shardBuffer);\n      const extraSize = cdfh.fileNameLength + cdfh.extraFieldLength + cdfh.fileCommentLength;\n\n      cdfhs.push(cdfh);\n      offset += CentralDirFileHeader.MIN_SIZE + extraSize;\n    }\n\n    return cdfhs;\n  }\n\n  private async read(fd: Buffer | FileHandle, buffer: Buffer, offset: number, length: number, position: number) {\n    if (Buffer.isBuffer(fd)) {\n      fd.copy(buffer, offset, position, position + length);\n    } else {\n      await fd.read(buffer, offset, length, position);\n    }\n  }\n\n  private async initEntries(cdfhs: CentralDirFileHeader[]): Promise<ZipEntry[]> {\n    const entries: ZipEntry[] = [];\n\n    for (const cdfh of cdfhs) {\n      const entry = new ZipEntry(this.dataSource, cdfh, { logger: this.logger, outerZipPath: this.src });\n      entries.push(entry);\n    }\n\n    return entries;\n  }\n}\n"]}