{"version":3,"file":"cdfh.js","sourceRoot":"","sources":["../../src/cdfh.ts"],"names":[],"mappings":";;;;;;AAAA,8DAAiC;AACjC,0DAA6B;AAE7B,MAAa,oBAAoB;IAU/B,IAAW,QAAQ;QACjB,IAAI,CAAC,IAAI,CAAC,cAAc;YAAE,OAAO,EAAE,CAAC;QACpC,gFAAgF;QAChF,uEAAuE;QACvE,OAAO,mBAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,CAAC;IAMD,YAAY,WAAmB;QAC7B,IAAA,qBAAM,EAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,oBAAoB,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC;QAEvG,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACtD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACtD,IAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAE1D,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC;YAC5B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,IAAI,CAC/B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CACzB,WAAW,EACX,oBAAoB,CAAC,QAAQ,EAC7B,oBAAoB,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CACpD,CACF,CAAC;QACJ,CAAC;IACH,CAAC;;AAxCH,oDAyCC;AAxCQ,8BAAS,GAAG,UAAU,CAAC;AACvB,6BAAQ,GAAG,EAAE,CAAC","sourcesContent":["import assert from 'node:assert';\nimport path from 'node:path';\n\nexport class CentralDirFileHeader {\n  static SIGNATURE = 0x02014b50;\n  static MIN_SIZE = 46;\n\n  public compressionMethod!: number;\n  public compressedSize!: number;\n  public fileNameLength!: number;\n  public extraFieldLength!: number;\n  public fileCommentLength!: number;\n  public localFileHeaderOffset!: number;\n  public get fileName(): string {\n    if (!this.fileNameBuffer) return '';\n    // Normalize the file name to accommodate windows as the separator always be \"/\"\n    // normalize() would consume more memory that is why we do it on-demand\n    return path.normalize(this.fileNameBuffer.toString('utf8'));\n  }\n\n  // Instead of converting fileName to a string, store it as a Buffer and decode it on-demand.\n  // This is to save memory.\n  private fileNameBuffer?: Buffer;\n\n  constructor(minimalData: Buffer) {\n    assert(minimalData.readUInt32LE(0) === CentralDirFileHeader.SIGNATURE, 'The signature is not correct');\n\n    this.compressionMethod = minimalData.readUInt16LE(10);\n    this.compressedSize = minimalData.readUInt32LE(20);\n    this.fileNameLength = minimalData.readUInt16LE(28);\n    this.extraFieldLength = minimalData.readUInt16LE(30);\n    this.fileCommentLength = minimalData.readUInt16LE(32);\n    this.localFileHeaderOffset = minimalData.readUInt32LE(42);\n\n    if (this.fileNameLength > 0) {\n      this.fileNameBuffer = Buffer.from(\n        Buffer.prototype.slice.call(\n          minimalData,\n          CentralDirFileHeader.MIN_SIZE,\n          CentralDirFileHeader.MIN_SIZE + this.fileNameLength\n        )\n      );\n    }\n  }\n}\n"]}