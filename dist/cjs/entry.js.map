{"version":3,"file":"entry.js","sourceRoot":"","sources":["../../src/entry.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\nimport fs from 'node:fs';\nimport { FileHandle } from 'node:fs/promises';\nimport path from 'node:path';\nimport { PassThrough, Readable } from 'node:stream';\nimport { pipeline } from 'node:stream/promises';\nimport zlib from 'node:zlib';\n\nimport { CentralDirFileHeader } from './cdfh';\nimport { Logger } from './types';\nimport { ensureDirectoryExists } from './utils';\n\nenum CompressionMethod {\n  NONE = 0,\n  DEFLATED = 8,\n}\n\nexport interface EntryOptions {\n  logger: Logger;\n  outerZipPath: string;\n}\n\nexport class LocalFileHeader {\n  static MIN_SIZE = 30;\n  static SIGNATURE = 0x04034b50;\n\n  public totalSize!: number;\n  public fileNameLength!: number;\n  public extraFieldLength!: number;\n\n  constructor(minimalData: Buffer) {\n    assert(minimalData.length === LocalFileHeader.MIN_SIZE, 'The buffer size should be 30');\n    assert(minimalData.readUInt32LE(0) === LocalFileHeader.SIGNATURE, 'The signature is not correct');\n\n    this.fileNameLength = minimalData.readUInt16LE(26);\n    this.extraFieldLength = minimalData.readUInt16LE(28);\n\n    this.totalSize = LocalFileHeader.MIN_SIZE + this.fileNameLength + this.extraFieldLength;\n  }\n}\n\nexport class FileData {\n  public readonly lfh!: LocalFileHeader;\n  public readonly cdfh!: CentralDirFileHeader;\n\n  constructor(lfh: LocalFileHeader, cdfh: CentralDirFileHeader) {\n    this.lfh = lfh;\n    this.cdfh = cdfh;\n  }\n\n  public createReadStream(src: string | Buffer): Readable {\n    if (Buffer.isBuffer(src)) {\n      return Readable.from(this.extractDataFromBuffer(src));\n    }\n\n    if (!src.endsWith('.zip')) {\n      throw new Error(`The file ${src} is not a zip file.`);\n    }\n\n    if (!fs.existsSync(src)) {\n      throw new Error(`The file ${src} does not exist.`);\n    }\n\n    const offset = this.cdfh.localFileHeaderOffset + this.lfh.totalSize;\n    return fs.createReadStream(src, {\n      start: offset,\n      end: offset + this.cdfh.compressedSize,\n    });\n  }\n\n  public async extractData(src: string | Buffer): Promise<Buffer> {\n    if (Buffer.isBuffer(src)) {\n      return this.extractDataFromBuffer(src);\n    }\n\n    if (!src.endsWith('.zip')) {\n      throw new Error(`The file ${src} is not a zip file.`);\n    }\n\n    if (!fs.existsSync(src)) {\n      throw new Error(`The file ${src} does not exist.`);\n    }\n\n    return this.extractDataFromFd(await fs.promises.open(src, 'r'));\n  }\n\n  public async extractDataFromFd(fd: FileHandle): Promise<Buffer> {\n    const buffer = Buffer.alloc(this.cdfh.compressedSize);\n    const offset = this.cdfh.localFileHeaderOffset + this.lfh.totalSize;\n    await fd.read(buffer, 0, this.cdfh.compressedSize, offset);\n\n    return buffer;\n  }\n\n  public extractDataFromBuffer(zipBuffer: Buffer): Buffer {\n    const buffer = Buffer.alloc(this.cdfh.compressedSize);\n    const offset = this.cdfh.localFileHeaderOffset + this.lfh.totalSize;\n    zipBuffer.copy(buffer, 0, offset, offset + this.cdfh.compressedSize);\n\n    return buffer;\n  }\n}\n\nexport class ZipEntry {\n  public get relPath(): string {\n    return this.cdfh.fileName;\n  }\n  public get name(): string {\n    return path.basename(this.relPath);\n  }\n  public get size(): number {\n    return this.cdfh.compressedSize;\n  }\n  public get fullPath(): string {\n    return path.join(this.outerZipPath, this.relPath);\n  }\n  public get isDirectory(): boolean {\n    return this.relPath.endsWith('/') || this.relPath.endsWith('\\\\');\n  }\n\n  private logger!: Logger;\n  // The entire data source of zip file\n  private dataSource!: string | Buffer;\n  private cdfh!: CentralDirFileHeader;\n  private lfh!: LocalFileHeader;\n  private fileData!: FileData;\n  private cachePath?: string;\n  private decompressedData?: Buffer;\n  private outerZipPath!: string;\n\n  public get isCached(): boolean {\n    return !!this.cachePath || !!this.decompressedData;\n  }\n\n  constructor(dataSource: string | Buffer, cdfh: CentralDirFileHeader, opts: EntryOptions) {\n    if (!cdfh) {\n      throw new Error('CentralDirFileHeader is empty.');\n    }\n\n    this.cdfh = cdfh;\n    this.logger = opts.logger;\n    this.dataSource = dataSource;\n    this.outerZipPath = opts.outerZipPath;\n  }\n\n  public async init() {\n    const { localFileHeaderOffset } = this.cdfh;\n    const fd = Buffer.isBuffer(this.dataSource) ? null : await fs.promises.open(this.dataSource, 'r');\n    const minimalLFHBuffer = await this.readLocalFileHeader(fd, localFileHeaderOffset);\n\n    this.lfh = new LocalFileHeader(minimalLFHBuffer);\n    this.fileData = new FileData(this.lfh, this.cdfh);\n  }\n\n  private async readLocalFileHeader(fd: FileHandle | null, offset: number): Promise<Buffer> {\n    const buffer = Buffer.alloc(LocalFileHeader.MIN_SIZE);\n    if (fd) {\n      await fd.read(buffer, 0, LocalFileHeader.MIN_SIZE, offset);\n    } else {\n      (this.dataSource as Buffer).copy(buffer, 0, offset, offset + LocalFileHeader.MIN_SIZE);\n    }\n    return buffer;\n  }\n\n  public async createReadStream(): Promise<Readable> {\n    if (!this.fileData) {\n      await this.init();\n    }\n\n    if (this.isCached) {\n      if (this.decompressedData) {\n        return Readable.from(this.decompressedData);\n      } else {\n        return fs.createReadStream(this.cachePath!);\n      }\n    }\n\n    if (this.cdfh.compressionMethod === CompressionMethod.NONE) {\n      if (Buffer.isBuffer(this.dataSource)) {\n        return Readable.from(this.dataSource);\n      } else {\n        return fs.createReadStream(this.dataSource);\n      }\n    } else if (this.cdfh.compressionMethod === CompressionMethod.DEFLATED) {\n      return this.createInflateStream();\n    } else {\n      throw new Error(`Unsupported compression method: ${this.cdfh.compressionMethod}`);\n    }\n  }\n\n  /**\n   * 如果 entry data 特别的大，直接使用 read 来获取完整的 buffer 会导致内存的 spike\n   * 最好提供一个 stream 接口供用户自己处理\n   */\n  public async read(): Promise<Buffer> {\n    if (!this.fileData) {\n      await this.init();\n    }\n\n    if (this.isCached) {\n      return this.getCachedData();\n    }\n\n    if (this.cdfh.compressionMethod === CompressionMethod.NONE) {\n      return this.fileData.extractData(this.dataSource);\n    } else if (this.cdfh.compressionMethod === CompressionMethod.DEFLATED) {\n      return this.inflateCompressedData();\n    } else {\n      throw new Error(`Unsupported compression method: ${this.cdfh.compressionMethod}`);\n    }\n  }\n\n  public async extract(dest: string): Promise<string> {\n    if (!this.fileData) {\n      await this.init();\n    }\n\n    if (this.isDirectory) {\n      await ensureDirectoryExists(path.join(dest, this.name));\n      this.logger.debug(`[AdvZlib.Entry] extract(): Extracted ${this.relPath} to ${dest}`);\n      return path.join(dest, this.name);\n    }\n\n    dest = await this.checkIfDestIsDir(dest) ? path.join(dest, this.name) : dest;\n    const readStream = await this.createReadStream();\n    const writeStream = fs.createWriteStream(dest);\n\n    await pipeline(readStream, writeStream);\n\n    this.logger.debug(`[AdvZlib.Entry] extract(): Extracted ${this.relPath} to ${dest}`);\n\n    return dest;\n  }\n\n  public onCache(cache: Buffer | string) {\n    if (this.isCached) {\n      return;\n    }\n\n    if (Buffer.isBuffer(cache)) {\n      this.decompressedData = cache;\n    } else {\n      this.cachePath = cache;\n    }\n  }\n\n  private async checkIfDestIsDir(dest: string): Promise<boolean> {\n    return fs.promises\n      .stat(dest)\n      .then((stat) => stat.isDirectory())\n      .catch(() => false);\n  }\n\n  private async getCachedData(): Promise<Buffer> {\n    if (this.decompressedData) {\n      return this.decompressedData;\n    } else if (this.cachePath) {\n      return fs.promises.readFile(this.cachePath);\n    } else {\n      throw new Error('No cached data found.');\n    }\n  }\n\n  private async inflateCompressedData(): Promise<Buffer> {\n    const compressedData = await this.fileData.extractData(this.dataSource);\n\n    return new Promise((resolve, reject) => {\n      const chunks: Buffer[] = [];\n      const inflater = zlib.createInflateRaw();\n      const inputStream = new PassThrough({ highWaterMark: 64 * 1024 }); // 64 KB buffer size\n\n      inputStream.end(compressedData);\n      inputStream.pipe(inflater);\n\n      inflater.on('data', (chunk) => chunks.push(chunk));\n      inflater.on('end', () => {\n        const decompressedData = Buffer.concat(chunks);\n\n        inflater.close();\n        inflater.removeAllListeners();\n        inputStream.removeAllListeners();\n\n        resolve(decompressedData);\n      });\n      inflater.on('error', (err) => {\n        inflater.close();\n        inflater.removeAllListeners();\n        inputStream.removeAllListeners();\n        reject(err);\n      });\n    });\n  }\n\n  private createInflateStream(): Readable {\n    const compressedStream = this.fileData.createReadStream(this.dataSource);\n    const inflaterStream = zlib.createInflateRaw();\n    compressedStream.pipe(inflaterStream);\n\n    return inflaterStream;\n  }\n}\n"]}