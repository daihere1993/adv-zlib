{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;AAQA,sDAMC;AAED,kCAQC;AAED,0CAgCC;AAzDD,qCAAiD;AAGjD;;;GAGG;AACI,KAAK,UAAU,qBAAqB,CAAC,OAAe;IACzD,IAAI,CAAC;QACH,MAAM,kBAAU,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACvD,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,MAAM,GAAG,CAAC;IACZ,CAAC;AACH,CAAC;AAED,SAAgB,WAAW,CAAC,KAAa;IACvC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC;QACtB,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAC3C,CAAC;SAAM,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC;QAC7B,OAAO,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAChD,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAChD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,eAAe,CACnC,KAAa,EACb,EAAoB,EACpB,MAAc,EACd,QAA6C;IAE7C,MAAM,gBAAgB,GAAgB;QACpC,QAAQ,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ;QACxC,QAAQ,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ;KACzC,CAAC;IAEF,MAAM,CAAC,KAAK,CACV,WAAW,KAAK,2BAA2B,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,mBAAmB,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAC7I,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;IAC1B,IAAI,MAAM,CAAC,EAAE;QAAE,MAAM,CAAC,EAAE,EAAE,CAAC;IAE3B,MAAM,cAAc,GAAgB;QAClC,QAAQ,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ;QACxC,QAAQ,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ;KACzC,CAAC;IAEF,MAAM,CAAC,KAAK,CACV,WAAW,KAAK,uBAAuB,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,iBAAiB,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CACnI,CAAC;IAEF,MAAM,YAAY,GAAG,cAAc,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;IACzE,MAAM,YAAY,GAAG,cAAc,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;IACzE,IAAI,QAAQ;QAAE,QAAQ,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC;IAE3E,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import fs from 'node:fs';\nimport { promises as fsPromises } from 'node:fs';\nimport { Logger, MemoryUsage } from './types/index.js';\n\n/**\n * Ensure that a directory exists, creating it if necessary\n * @param dirPath The path to the directory\n */\nexport async function ensureDirectoryExists(dirPath: string): Promise<void> {\n  try {\n    await fsPromises.mkdir(dirPath, { recursive: true });\n  } catch (err: any) {\n    throw err;\n  }\n}\n\nexport function formatBytes(bytes: number) {\n  if (bytes < 1024 ** 2) {\n    return (bytes / 1024).toFixed(2) + ' KB';\n  } else if (bytes < 1024 ** 3) {\n    return (bytes / 1024 ** 2).toFixed(2) + ' MB';\n  } else {\n    return (bytes / 1024 ** 3).toFixed(2) + ' GB';\n  }\n}\n\nexport async function testMemoryUsage<T>(\n  label: string,\n  fn: () => Promise<T>,\n  logger: Logger,\n  expectFn?: (memoryUsage: MemoryUsage) => void\n): Promise<T> {\n  const startMemoryUsage: MemoryUsage = {\n    heapUsed: process.memoryUsage().heapUsed,\n    external: process.memoryUsage().external,\n  };\n\n  logger.debug(\n    `[Memory]${label}() start: startHeapUsed ${formatBytes(startMemoryUsage.heapUsed)}, startExternal ${formatBytes(startMemoryUsage.external)}`\n  );\n\n  const result = await fn();\n  if (global.gc) global.gc();\n\n  const endMemoryUsage: MemoryUsage = {\n    heapUsed: process.memoryUsage().heapUsed,\n    external: process.memoryUsage().external,\n  };\n\n  logger.debug(\n    `[Memory]${label}() end: endHeapUsed ${formatBytes(endMemoryUsage.heapUsed)}, endExternal ${formatBytes(endMemoryUsage.external)}`\n  );\n\n  const realHeapUsed = endMemoryUsage.heapUsed - startMemoryUsage.heapUsed;\n  const realExternal = endMemoryUsage.external - startMemoryUsage.external;\n  if (expectFn) expectFn({ heapUsed: realHeapUsed, external: realExternal });\n\n  return result;\n}\n"]}